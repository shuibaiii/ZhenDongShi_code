function [y1] = NeuralNet_Bottom(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 20-Feb-2022 15:36:37.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 1xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

% 第一层有三个神经元
% 第二层有一个神经元
% 全部标准数据都用来拟合，在数据集中100%用于训练，0%用于验证，0%用于测试

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 2028;
x1_step1.gain = 0.001230012300123;
x1_step1.ymin = -1;

% Layer 1
b1 = [1.0000219120696309805;-2.6406538585813796871;-6.468143344216883861];
IW1_1 = [-0.033996059329267490356;-1.604910779909637375;-4.92435806457281533];

% Layer 2
b2 = 9.1636937687201331926;
LW2_1 = [7.1873245618506151899 3.2426598713984167155 12.291203869468057874];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.005;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
